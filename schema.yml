openapi: 3.0.3
info:
  title: backend API
  version: 1.0.0
  description: backend API
paths:
  /api/v1/basket/:
    get:
      operationId: basket_list
      description: Класс для добавления в корзину продуктов
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - basket
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBasketList'
          description: ''
    post:
      operationId: basket_create
      description: Класс для добавления в корзину продуктов
      tags:
      - basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BasketRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BasketRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
          description: ''
  /api/v1/basket/{id}/:
    get:
      operationId: basket_retrieve
      description: Класс для добавления в корзину продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказанная позиция.
        required: true
      tags:
      - basket
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
          description: ''
    put:
      operationId: basket_update
      description: Класс для добавления в корзину продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказанная позиция.
        required: true
      tags:
      - basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BasketRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BasketRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
          description: ''
    patch:
      operationId: basket_partial_update
      description: Класс для добавления в корзину продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказанная позиция.
        required: true
      tags:
      - basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBasketRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBasketRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBasketRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
          description: ''
    delete:
      operationId: basket_destroy
      description: Класс для добавления в корзину продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказанная позиция.
        required: true
      tags:
      - basket
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/category/:
    get:
      operationId: category_list
      description: Класс для просмотра категорий (сделано)
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - category
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: category_create
      description: Класс для просмотра категорий (сделано)
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/v1/category/{id}/:
    get:
      operationId: category_retrieve
      description: Класс для просмотра категорий (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Категория.
        required: true
      tags:
      - category
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: category_update
      description: Класс для просмотра категорий (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Категория.
        required: true
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: category_partial_update
      description: Класс для просмотра категорий (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Категория.
        required: true
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: category_destroy
      description: Класс для просмотра категорий (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Категория.
        required: true
      tags:
      - category
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/order/:
    get:
      operationId: order_list
      description: Класс для получения и размещения заказов пользователями (сделан
        кроме суммы и обновления статуса )
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - order
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: order_create
      description: Класс для получения и размещения заказов пользователями (сделан
        кроме суммы и обновления статуса )
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/order/{id}/:
    get:
      operationId: order_retrieve
      description: Класс для получения и размещения заказов пользователями (сделан
        кроме суммы и обновления статуса )
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: order_update
      description: Класс для получения и размещения заказов пользователями (сделан
        кроме суммы и обновления статуса )
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: order_partial_update
      description: Класс для получения и размещения заказов пользователями (сделан
        кроме суммы и обновления статуса )
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: order_destroy
      description: Класс для получения и размещения заказов пользователями (сделан
        кроме суммы и обновления статуса )
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Заказ.
        required: true
      tags:
      - order
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/partner/update/:
    post:
      operationId: partner_update_create
      description: Класс для обновления прайса от поставщика
      tags:
      - partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/products/:
    get:
      operationId: products_list
      description: Класс для просмотра и создания списка продуктов
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: shop
        schema:
          type: integer
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: products_create
      description: Класс для просмотра и создания списка продуктов
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/products/{id}/:
    get:
      operationId: products_retrieve
      description: Класс для просмотра и создания списка продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Информация о продукте.
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: products_update
      description: Класс для просмотра и создания списка продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Информация о продукте.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: products_partial_update
      description: Класс для просмотра и создания списка продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Информация о продукте.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_destroy
      description: Класс для просмотра и создания списка продуктов
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Информация о продукте.
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/products/write/:
    post:
      operationId: products_write_create
      description: Класс для просмотра и создания списка продуктов
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/shop/:
    get:
      operationId: shop_list
      description: Класс для просмотра списка магазинов (сделано)
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - shop
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedShopList'
          description: ''
    post:
      operationId: shop_create
      description: Класс для просмотра списка магазинов (сделано)
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShopRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShopRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
  /api/v1/shop/{id}/:
    get:
      operationId: shop_retrieve
      description: Класс для просмотра списка магазинов (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - shop
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    put:
      operationId: shop_update
      description: Класс для просмотра списка магазинов (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShopRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShopRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    patch:
      operationId: shop_partial_update
      description: Класс для просмотра списка магазинов (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - shop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedShopRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedShopRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedShopRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    delete:
      operationId: shop_destroy
      description: Класс для просмотра списка магазинов (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - shop
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/shop/{id}/state/:
    get:
      operationId: shop_state_retrieve
      description: Класс для просмотра списка магазинов (сделано)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Магазин.
        required: true
      tags:
      - shop
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
  /api/v1/user/contact/:
    get:
      operationId: user_contact_retrieve
      description: Класс для работы с контактами покупателей (в принципе рабочий,
        можно переписать)
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
    post:
      operationId: user_contact_create
      description: Класс для работы с контактами покупателей (в принципе рабочий,
        можно переписать)
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContactRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
    put:
      operationId: user_contact_update
      description: Класс для работы с контактами покупателей (в принципе рабочий,
        можно переписать)
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContactRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
    delete:
      operationId: user_contact_destroy
      description: Класс для работы с контактами покупателей (в принципе рабочий,
        можно переписать)
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/user/login/:
    post:
      operationId: user_login_create
      description: Класс для авторизации пользователей (сделано)
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/user/password_reset:
    post:
      operationId: user_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/v1/user/password_reset/confirm:
    post:
      operationId: user_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/v1/user/register/:
    post:
      operationId: user_register_create
      description: Для регистрации покупателей
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: ''
  /api/v1/user/register/confirm/:
    post:
      operationId: user_register_confirm_create
      description: Класс для подтверждения почтового адреса
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    Basket:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        shop:
          allOf:
          - $ref: '#/components/schemas/Shop'
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
      required:
      - id
      - product
      - quantity
      - shop
    BasketRequest:
      type: object
      properties:
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        shop_id:
          type: integer
          writeOnly: true
          title: Выбор магазинов для заказа
        product_id:
          type: integer
          writeOnly: true
          title: Выбор продуктов для заказа
      required:
      - product_id
      - quantity
      - shop_id
    Category:
      type: object
      properties:
        name:
          type: string
          title: Название
          maxLength: 80
      required:
      - name
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Название
          maxLength: 80
      required:
      - name
    Contact:
      type: object
      properties:
        city:
          type: string
          title: Город
          maxLength: 50
        street:
          type: string
          title: Улица
          maxLength: 100
        house:
          type: string
          title: Дом
          maxLength: 15
        structure:
          type: string
          title: Корпус
          maxLength: 15
        building:
          type: string
          title: Строение
          maxLength: 15
        apartment:
          type: string
          title: Квартира
          maxLength: 15
        phone:
          type: string
          title: Телефон
          maxLength: 20
      required:
      - city
      - phone
      - street
    ContactRequest:
      type: object
      properties:
        city:
          type: string
          minLength: 1
          title: Город
          maxLength: 50
        street:
          type: string
          minLength: 1
          title: Улица
          maxLength: 100
        house:
          type: string
          title: Дом
          maxLength: 15
        structure:
          type: string
          title: Корпус
          maxLength: 15
        building:
          type: string
          title: Строение
          maxLength: 15
        apartment:
          type: string
          title: Квартира
          maxLength: 15
        user:
          type: integer
          writeOnly: true
          title: Пользователь
        phone:
          type: string
          minLength: 1
          title: Телефон
          maxLength: 20
      required:
      - city
      - phone
      - street
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    EmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        dt:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          title: Статус
      required:
      - dt
      - id
    OrderRequest:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          title: Статус
    PaginatedBasketList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Basket'
    PaginatedCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedOrderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedShopList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Shop'
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PasswordTokenRequest:
      type: object
      properties:
        password:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - password
      - token
    PatchedBasketRequest:
      type: object
      properties:
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        shop_id:
          type: integer
          writeOnly: true
          title: Выбор магазинов для заказа
        product_id:
          type: integer
          writeOnly: true
          title: Выбор продуктов для заказа
    PatchedCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Название
          maxLength: 80
    PatchedOrderRequest:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          title: Статус
    PatchedProductRequest:
      type: object
      properties:
        model:
          type: string
          title: Модель
          maxLength: 80
        name:
          type: string
          minLength: 1
          title: Название продукта
          maxLength: 80
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        price:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Цена
        price_rrc:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Рекомендуемая розничная цена
    PatchedShopRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Название
          maxLength: 50
        url:
          type: string
          format: uri
          nullable: true
          title: Ссылка
          maxLength: 200
        state:
          type: boolean
          title: Статус работы магазина
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        user:
          type: integer
          nullable: true
          title: Пользователь
    Product:
      type: object
      properties:
        model:
          type: string
          title: Модель
          maxLength: 80
        name:
          type: string
          title: Название продукта
          maxLength: 80
        shop:
          type: string
          readOnly: true
        category:
          type: string
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        price:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Цена
        price_rrc:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Рекомендуемая розничная цена
        parameter:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
          readOnly: true
      required:
      - category
      - name
      - parameter
      - price
      - price_rrc
      - quantity
      - shop
    ProductParameter:
      type: object
      properties:
        name:
          type: string
          title: Название
          maxLength: 40
        value:
          type: string
          title: Значение
          maxLength: 100
        parameter:
          type: string
          readOnly: true
      required:
      - name
      - parameter
      - value
    ProductParameterRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Название
          maxLength: 40
        value:
          type: string
          minLength: 1
          title: Значение
          maxLength: 100
      required:
      - name
      - value
    ProductRequest:
      type: object
      properties:
        model:
          type: string
          title: Модель
          maxLength: 80
        name:
          type: string
          minLength: 1
          title: Название продукта
          maxLength: 80
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        price:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Цена
        price_rrc:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Рекомендуемая розничная цена
      required:
      - name
      - price
      - price_rrc
      - quantity
    Registration:
      type: object
      properties:
        surname:
          type: string
          title: Фамилия
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 50
        name:
          type: string
          title: Имя
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 50
        patronymic:
          type: string
          title: Отчество
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 50
        email:
          type: string
          format: email
          title: Email адрес
          maxLength: 254
        password:
          type: string
          title: Пароль
          maxLength: 100
        password_rep:
          type: string
          title: Пароль (повтор)
          maxLength: 100
        company:
          type: string
          title: Компания
          maxLength: 50
        position:
          type: string
          title: Должность
          maxLength: 50
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: Тип пользователя
      required:
      - email
      - name
      - password
      - password_rep
      - patronymic
      - surname
    RegistrationRequest:
      type: object
      properties:
        surname:
          type: string
          minLength: 1
          title: Фамилия
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 50
        name:
          type: string
          minLength: 1
          title: Имя
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 50
        patronymic:
          type: string
          minLength: 1
          title: Отчество
          description: Required. 50 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 50
        email:
          type: string
          format: email
          minLength: 1
          title: Email адрес
          maxLength: 254
        password:
          type: string
          minLength: 1
          title: Пароль
          maxLength: 100
        password_rep:
          type: string
          minLength: 1
          title: Пароль (повтор)
          maxLength: 100
        company:
          type: string
          title: Компания
          maxLength: 50
        position:
          type: string
          title: Должность
          maxLength: 50
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          title: Тип пользователя
      required:
      - email
      - name
      - password
      - password_rep
      - patronymic
      - surname
    Shop:
      type: object
      properties:
        name:
          type: string
          title: Название
          maxLength: 50
        url:
          type: string
          format: uri
          nullable: true
          title: Ссылка
          maxLength: 200
        state:
          type: boolean
          title: Статус работы магазина
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        user:
          type: integer
          nullable: true
          title: Пользователь
      required:
      - name
    ShopRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          title: Название
          maxLength: 50
        url:
          type: string
          format: uri
          nullable: true
          title: Ссылка
          maxLength: 200
        state:
          type: boolean
          title: Статус работы магазина
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        user:
          type: integer
          nullable: true
          title: Пользователь
      required:
      - name
    StatusEnum:
      enum:
      - basket
      - new
      - confirmed
      - assembled
      - sent
      - delivered
      - canceled
      type: string
      description: |-
        * `basket` - Статус корзины
        * `new` - Новый
        * `confirmed` - Подтвержден
        * `assembled` - Собран
        * `sent` - Отправлен
        * `delivered` - Доставлен
        * `canceled` - Отменен
    TypeEnum:
      enum:
      - shop
      - buyer
      type: string
      description: |-
        * `shop` - Магазин
        * `buyer` - Покупатель
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
